package de.thm.mni.compilerbau.phases._02_03_parser;

import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.*;
import de.thm.mni.compilerbau.phases._01_scanner.Scanner;
import de.thm.mni.compilerbau.absyn.*;
import de.thm.mni.compilerbau.table.Identifier;
import de.thm.mni.compilerbau.utils.SplError;
import de.thm.mni.compilerbau.CommandLineOptions;

parser code {:
  public CommandLineOptions options = null;

  public void syntax_error(Symbol currentToken) {
    // Apparently there is a cup bug that causes expected_token_ids() to return incorrect results on first call
    // This is why this call is inserted.
    this.expected_token_ids();

    throw SplError.SyntaxError(new Position(currentToken.left, currentToken.right),
            this.symbl_name_from_id(currentToken.sym),
            this.expected_token_ids().stream().map(this::symbl_name_from_id).toList());
  }

  /**
   * @return An empty list. (Uses LinkedList)
   */
  public static <E> List<E> nil() {
      return new LinkedList<E>();
  }

  /**
   * Constructs a list from a head and a tail without modifying the tail (Uses LinkedList).
   * Use this as a helper if you don't want to deal with constructing lists manually.
   *
   * @param head The head of the list
   * @param tail The tail of the list
   * @return A list containing the head element and all elements of tail
   */
  public static <E> List<E> cons(E head, List<E> tail) {
    List<E> copy = new LinkedList(tail);
    copy.add(0, head);
    return copy;
  }
:}

/* Terminals/Tokens */
terminal LBRACK, RBRACK, LPAREN, RPAREN, LCURL, RCURL;         //Braces, parenthesis, brackets
terminal LT, LE, GT, GE, NE, EQ;                               //Comparison operators
terminal PLUS, MINUS, STAR, SLASH;                             //Arithmetic operators
terminal ASGN, COMMA, COLON, SEMIC;                            //Other delimiters
terminal TYPE, PROC, ARRAY, OF, REF, VAR, IF, ELSE, WHILE;     //Keywords

terminal Identifier IDENT;    //Identifiers
terminal Integer INTLIT;      //Integer literals

/* Non-terminals */
non terminal Program program;
non terminal GlobalDefinition globalDef;
non terminal List<GlobalDefinition> globalDefList;
non terminal List<ParameterDefinition> parameterDefList;
non terminal ProcedureDefinition procedureDef;
non terminal List<ParameterDefinition> optionaleParaDef;
non terminal ParameterDefinition parameterDef;
non terminal VariableDefinition variableDef;
non terminal Statement statement;
non terminal Statement ifStat;
non terminal Statement optionaleEles;
//non terminal Expression namedTypeExpr;
//non terminal NamedVariable namedVar;
non terminal Variable arrayAccess;
non terminal List<Expression> optionaleDimension;
//non terminal dimensionRest;

non terminal TypeExpression typeExpr;
non terminal Statement assignStat;

//non terminal BinaryExpression binaryExprPlus;
non terminal Expression binaryExpr;
non terminal Expression termPlusMinus;
non terminal Expression mulDiv;
non terminal Expression paren;
non terminal Expression expr;


non terminal Statement callStat;
non terminal Statement compoundStat;
non terminal Statement emptyStat;
//non terminal IntLiteral intLiteral;
//non terminal Position position;
non terminal TypeDefinition typeDef;
non terminal Expression unaryExpr;
//non terminal ArrayAccess variable;
non terminal Statement whileStat;
non terminal epsilon;
non terminal List<VariableDefinition> variableDefList;
non terminal List<Statement> statementList;
non terminal List<Expression> exprList;
start with program;
//type myInt = int;

program ::=  globalDefList : globalDefList
        {:
         RESULT = new Program(new Position(globalDefListleft,globalDefListright), globalDefList );
        :};

globalDef ::= typeDef : typeDef {: RESULT = typeDef;:} | procedureDef : procDef {: RESULT = procDef;:};

typeDef ::= TYPE: type IDENT: name EQ:eq typeExpr: typeExpr SEMIC
        {:
        RESULT = new TypeDefinition(new Position(typeleft, typeright), name, typeExpr);
        :};

typeExpr ::= ARRAY:array LBRACK: lbrack  INTLIT: intlit RBRACK
                    : rbrack  OF: of typeExpr: typeExpr{:
                                                    RESULT = new ArrayTypeExpression(new Position(arrayleft, arrayright), intlit , typeExpr );
                                                        :}
            | IDENT: ident {:RESULT = new NamedTypeExpression(new Position(identleft, identright), ident);:};
epsilon ::= {:RESULT = nil();:};

//namedVar ::= IDENT: ident {:RESULT = new NamedVariable(new Position(identleft, identright), ident);:};

statementList ::= epsilon: epsilon {:RESULT = nil();:}| statement:head statementList: tail{:RESULT = cons(head, tail);:};

variableDef ::= VAR:var IDENT: ident  COLON: co typeExpr: typeExpr SEMIC {:
                    RESULT = new VariableDefinition(new Position(varleft, varright),ident, typeExpr);:};


globalDefList ::= epsilon: epsilon {:RESULT = nil();:}
                | globalDef: tail globalDefList: head{: RESULT = cons(tail, head); :};

variableDefList ::= epsilon : epsilon {:RESULT = nil();:}
                    | variableDef:head variableDefList:tail {: RESULT = cons(head, tail);:};


parameterDef ::= IDENT : ident  COLON typeExpr: typeExpr {:
                RESULT = new ParameterDefinition(new Position(identleft, identright), ident,typeExpr, false);:}|
                 REF : ref IDENT : ident COLON typeExpr : typeExpr {:
                  RESULT = new ParameterDefinition(new Position(refleft, refright), ident, typeExpr, true);:};


parameterDefList ::= parameterDef : head COMMA parameterDefList : tail {:
                    RESULT = cons(head, tail);:}
                    | parameterDef : parameterDef {:RESULT = cons(parameterDef, nil());:};

procedureDef ::= PROC:proc IDENT:ident LPAREN optionaleParaDef: optionaleParaDef RPAREN
                LCURL variableDefList:variableDefList statementList:statementList RCURL{:
                RESULT = new ProcedureDefinition(new Position(procleft, procright), ident,optionaleParaDef,variableDefList,statementList );:};

statement ::= ifStat:ifStat {: RESULT = ifStat;:} |
              callStat:callStat {: RESULT = callStat;:}|
              whileStat:whileStat  {: RESULT = whileStat;:}|
              emptyStat:emptyStat  {: RESULT = emptyStat;:}|
              assignStat:assignStat  {: RESULT = assignStat;:}|
              compoundStat:compoundStat {: RESULT = compoundStat;:};

ifStat ::= IF: IF LPAREN expr : expr RPAREN statement : state optionaleEles : optionaleEles
            {:
            RESULT =  new IfStatement(new Position(IFleft, IFright), expr, state, optionaleEles);:};
optionaleEles ::= epsilon: epsilon
                         {:RESULT = new EmptyStatement(new Position(epsilonleft, epsilonright));:}
                        | ELSE statement: state
                    {:
                    RESULT = state;
                    :};


compoundStat ::= LCURL:lcurl statementList:statementList RCURL
        {:
        RESULT = new CompoundStatement(new Position(lcurlleft, lcurlright), statementList);
        :};

whileStat ::= WHILE: WHILE  LPAREN expr:expr RPAREN statement:state
        {:
        RESULT = new WhileStatement(new Position(WHILEleft, WHILEright),expr, state);
        :};

emptyStat ::= SEMIC:semic {:RESULT = new EmptyStatement(new Position(semicleft, semicright));:};

callStat ::= IDENT:ident LPAREN exprList:exprList RPAREN SEMIC
        {:
        RESULT = new CallStatement(new Position(identleft, identright), ident, exprList);
        :};

optionaleParaDef ::= parameterDefList : parameterDefList {:RESULT = parameterDefList;:} | epsilon {:RESULT = nil();:};

assignStat ::= arrayAccess:variable ASGN termPlusMinus: termPlusMinus SEMIC
        {:
        RESULT = new AssignStatement(new Position(variableleft, variableright), variable , termPlusMinus);
        :};

exprList ::= exprList:head COMMA:comma expr:tail
        {:
        RESULT = cons(tail, head);
         :}
        | expr:expr
            {:
             RESULT = cons(expr, nil());
            :}
          | epsilon {: RESULT = nil(); :};


arrayAccess ::= IDENT:ident optionaleDimension:optionaleDimension
        {:
        RESULT = optionaleDimension.stream().reduce(new NamedVariable(new Position(identleft, identright), ident), ( Variable var1,Expression  exp) ->
       new ArrayAccess(new Position(identleft, identright),var1, exp)
       ,(a, b) -> a);



//TODO ASK how to use ArrayAccess(Position position, Variable array, Expression index)

        :};

optionaleDimension ::= LBRACK expr:head RBRACK optionaleDimension:tail
                        {:RESULT= cons(head, tail);:}
                         | epsilon
                         {: RESULT = nil(); :}
;

expr ::= binaryExpr:binaryExpr
        {:
        RESULT = binaryExpr;
        :};

//variable ::=  arrayAccess: arrayAccess
//        {:
//        RESULT = arrayAccess;
//        :};

binaryExpr ::= binaryExpr:lop LE:op termPlusMinus:rop
              {: RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.LSE, lop, rop); :}
            | binaryExpr:lop GT:op termPlusMinus:rop
              {: RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.GRT, lop, rop); :}
            | binaryExpr:lop EQ:op termPlusMinus:rop
              {: RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.EQU, lop, rop); :}
            | binaryExpr:lop LT:op termPlusMinus:rop
              {: RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.LST, lop, rop); :}
            | binaryExpr:lop NE:op termPlusMinus:rop
              {: RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.NEQ, lop, rop); :}
            | binaryExpr:lop GE:op termPlusMinus:rop
              {: RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.GRE, lop, rop); :}
            | termPlusMinus:term
              {: RESULT = term; :};

termPlusMinus ::= termPlusMinus:lop PLUS:op mulDiv:rop
                 {: RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.ADD, lop, rop); :}
               | termPlusMinus:lop MINUS:op mulDiv:rop
                 {: RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.SUB, lop, rop); :}
               | mulDiv:term
                 {: RESULT = term; :};

mulDiv ::= mulDiv:lop STAR:op unaryExpr:rop
          {: RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.MUL, lop, rop); :}
        | mulDiv:lop SLASH:op unaryExpr:rop
          {: RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.DIV, lop, rop); :}
        | unaryExpr:term
          {: RESULT = term; :};

unaryExpr ::= MINUS:op unaryExpr:term
             {: RESULT = new UnaryExpression(new Position(opleft, opright), UnaryExpression.Operator.MINUS, term); :}
           | paren:term
             {: RESULT = term; :};

paren ::= INTLIT:lit
    {:RESULT = new IntLiteral(new Position(litleft, litright),lit);:}
       | LPAREN:lp expr:term RPAREN:rp
         {: RESULT = term; :}
       | arrayAccess:arrayAccess
       {: RESULT = new VariableExpression(new Position(arrayAccessleft, arrayAccessright), arrayAccess); :};